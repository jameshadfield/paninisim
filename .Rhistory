frac.correct <- num.correct / dim(d)[[1]]
return(frac.correct)
}
analyse.json <- function(json.filename) {
d <- fromJSON(txt=json.filename)
# d is a data.frame with 3 columns: id / x / y
d$group <- genome.groups.from.id(d)
num.groups <- length(unique(d$group))
clustering <- kmeans(d[,c(2,3)], centers=num.groups)
d$cluster <- as.factor(clustering$cluster)
ggplot(data=d, aes(x=x,y=y,colour=group,shape=cluster)) + geom_point()
success.rate <- get.success.rate(d, t, num.groups)
print(success.rate)
}
analyse.json("json/tmp.json")
folder.name <- "json/alpha"
list.of.json.files <- list.files(path = folder.name, pattern = ".*\\.json")
#for json.file in
json.file <- list.of.json.files[[1]]
json.path <- paste(folder.name,json.file,sep="/")
params <- as.integer(str_extract_all(json.file,"(\\d+)")[[1]])
analyse.json(json.path)
assert_that(length(params) == 8)
params
numeric()
integer()
master <- data.frame(n=integer())
master
master <- data.frame(n=integer(),
k=integer(),
s=integer(),
tau=integer(),
m=integer(),
mu_gain=integer(),
mu_loss=integer(),
r=integer(),
file.path=character(),
f=numeric(),
stringsAsFactors=FALSE)
master
analyse.json <- function(json.filename) {
d <- fromJSON(txt=json.filename)
# d is a data.frame with 3 columns: id / x / y
d$group <- genome.groups.from.id(d)
num.groups <- length(unique(d$group))
clustering <- kmeans(d[,c(2,3)], centers=num.groups)
d$cluster <- as.factor(clustering$cluster)
ggplot(data=d, aes(x=x,y=y,colour=group,shape=cluster)) + geom_point()
success.rate <- get.success.rate(d, t, num.groups)
return(success.rate)
}
success.rate <- analyse.json(json.path)
analyse.json <- function(json.filename) {
d <- fromJSON(txt=json.filename)
# d is a data.frame with 3 columns: id / x / y
d$group <- genome.groups.from.id(d)
num.groups <- length(unique(d$group))
clustering <- kmeans(d[,c(2,3)], centers=num.groups)
d$cluster <- as.factor(clustering$cluster)
ggplot(data=d, aes(x=x,y=y,colour=group,shape=cluster)) + geom_point()
success.rate <- get.success.rate(d, t, num.groups)
print(success.rate)
return(success.rate)
}
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
get.success.rate <- function(d, t, num.groups) {
### algorythm to determine success rate (loop over groups)
### t: data.frame with columns group & cluster
### returns float
num.correct <- 0
for (i in 0:(num.groups-1)) {
t <- d %>% subset(group==i) %>% use_series(cluster) %>% table()
print(t)
num.correct <- num.correct + max(t)
print(paste("i:",i,"correct:",max(t),"/",sum(t),sep=" "))
}
frac.correct <- num.correct / dim(d)[[1]]
return(frac.correct)
}
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
?kmeans
analyse.json <- function(json.filename) {
d <- fromJSON(txt=json.filename)
# d is a data.frame with 3 columns: id / x / y
d$group <- genome.groups.from.id(d)
num.groups <- length(unique(d$group))
clustering <- kmeans(d[,c(2,3)], centers=num.groups, iter.max=1000, nstart=5)
d$cluster <- as.factor(clustering$cluster)
ggplot(data=d, aes(x=x,y=y,colour=group,shape=cluster)) + geom_point()
success.rate <- get.success.rate(d, t, num.groups)
print(success.rate)
return(success.rate)
}
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
success.rate <- analyse.json(json.path)
dim(master)
dim(master)[[1]]
dim(master)[[1]]+1
c(params, json.path, success.rate)
master[dim(master)[[1]]+1 , ] <- c(params, json.path, success.rate)
master
for (json.file in list.of.json.files) {
print json.file
}
for (json.file in list.of.json.files) {
print(json.file)
}
for (json.file in list.of.json.files) {
json.file <- list.of.json.files[[1]]
json.path <- paste(folder.name,json.file,sep="/")
params <- as.integer(str_extract_all(json.file,"(\\d+)")[[1]])
assert_that(length(params) == 8)
success.rate <- analyse.json(json.path)
c(params, json.path, success.rate)
master[dim(master)[[1]]+1 , ] <- c(params, json.path, success.rate)
}
folder.name <- "json/alpha"
list.of.json.files <- list.files(path = folder.name, pattern = ".*\\.json")
master <- data.frame(n=integer(),
k=integer(),
s=integer(),
tau=integer(),
m=integer(),
mu_gain=integer(),
mu_loss=integer(),
r=integer(),
file.path=character(),
f=numeric(),
stringsAsFactors=FALSE)
for (json.file in list.of.json.files) {
json.file <- list.of.json.files[[1]]
json.path <- paste(folder.name,json.file,sep="/")
params <- as.integer(str_extract_all(json.file,"(\\d+)")[[1]])
assert_that(length(params) == 8)
success.rate <- analyse.json(json.path)
c(params, json.path, success.rate)
master[dim(master)[[1]]+1 , ] <- c(params, json.path, success.rate)
}
master
for (json.file in list.of.json.files) {
print(json.file)
json.file <- list.of.json.files[[1]]
json.path <- paste(folder.name,json.file,sep="/")
params <- as.integer(str_extract_all(json.file,"(\\d+)")[[1]])
assert_that(length(params) == 8)
success.rate <- analyse.json(json.path)
c(params, json.path, success.rate)
master[dim(master)[[1]]+1 , ] <- c(params, json.path, success.rate)
}
for (json.file in list.of.json.files) {
print(json.file)
json.file <- list.of.json.files[[1]]
json.path <- paste(folder.name,json.file,sep="/")
params <- as.integer(str_extract_all(json.file,"(\\d+)")[[1]])
print(params)
assert_that(length(params) == 8)
success.rate <- analyse.json(json.path)
c(params, json.path, success.rate)
master[dim(master)[[1]]+1 , ] <- c(params, json.path, success.rate)
}
for (json.file in list.of.json.files) {
print("******")
print(json.file)
json.file <- list.of.json.files[[1]]
json.path <- paste(folder.name,json.file,sep="/")
params <- as.integer(str_extract_all(json.file,"(\\d+)")[[1]])
print(params)
assert_that(length(params) == 8)
success.rate <- analyse.json(json.path)
c(params, json.path, success.rate)
master[dim(master)[[1]]+1 , ] <- c(params, json.path, success.rate)
}
debugSource('~/Documents/sanger/paninisim/visualise.R')
json.file
json.file
json.file
folder.name <- "json/alpha"
list.of.json.files <- list.files(path = folder.name, pattern = ".*\\.json")
master <- data.frame(n=integer(),
k=integer(),
s=integer(),
tau=integer(),
m=integer(),
mu_gain=integer(),
mu_loss=integer(),
r=integer(),
file.path=character(),
f=numeric(),
stringsAsFactors=FALSE)
for (json.file in list.of.json.files) {
json.path <- paste(folder.name,json.file,sep="/")
params <- as.integer(str_extract_all(json.file,"(\\d+)")[[1]])
print(params)
assert_that(length(params) == 8)
success.rate <- analyse.json(json.path)
c(params, json.path, success.rate)
master[dim(master)[[1]]+1 , ] <- c(params, json.path, success.rate)
}
master
ggplot(data=master, aes(x=k, y=f, colour=n, group=n)) + geom_point()
master$f <- as.numeric(master$f)
str(master)
for (i in 1:8) {
master[i,] <- as.integer(master[i,])
}
maser[10,] <- as.numeric(master[10,])
master
folder.name <- "json/alpha"
list.of.json.files <- list.files(path = folder.name, pattern = ".*\\.json")
master <- data.frame(n=integer(),
k=integer(),
s=integer(),
tau=integer(),
m=integer(),
mu_gain=integer(),
mu_loss=integer(),
r=integer(),
file.path=character(),
f=numeric(),
stringsAsFactors=FALSE)
for (json.file in list.of.json.files) {
json.path <- paste(folder.name,json.file,sep="/")
params <- as.integer(str_extract_all(json.file,"(\\d+)")[[1]])
print(params)
assert_that(length(params) == 8)
success.rate <- analyse.json(json.path)
c(params, json.path, success.rate)
master[dim(master)[[1]]+1 , ] <- c(params, json.path, success.rate)
}
master$f <- as.numeric(master$f)
for (i in 1:8) {
master[,i] <- as.integer(master[,i])
}
maser[,10] <- as.numeric(master[,10])
master[,10] <- as.numeric(master[,10])
str(master)
ggplot(data=master, aes(x=k, y=f, colour=n, group=n)) + geom_point()
ggplot(data=master, aes(x=k, y=f, colour=n, group=n)) + geom_line()
ggplot(data=master, aes(x=k, y=f, group=n)) + geom_line()
for (i in 1:8) {
master[,i] <- as.factor(as.integer(master[,i]))
}
master[,10] <- as.numeric(master[,10])
ggplot(data=master, aes(x=k, y=f, colour=n, group=n)) + geom_line()
list()
rm(list=ls())
library(jsonlite)
library(magrittr)
library(ggplot2)
library(stringr)
library(assertthat)
setwd("~/Documents/sanger/paninisim")
#### how to import #####
# target directory contains a bunch of json files from PANINI
# the file names are read in, and then the paths are stored in a data.frame
# with fields:
# for each file (simulation):
#     the json is parsed and k is calculated
#     k-means clustering is done
#     for n <= k, what is max number of members of n in a single cluster
#     calculate percentage mis-clustered and store in data.frame
# visualise according to user definitions
genome.groups.from.id <- function(df,id="id") {
# returns a vector the same length as the incoming data.frame
return(apply(df[id],1,str_match,pattern="l(\\d+)g")[2,])
}
get.success.rate <- function(d, t, num.groups) {
### algorythm to determine success rate (loop over groups)
### t: data.frame with columns group & cluster
### returns float
num.correct <- 0
for (i in 0:(num.groups-1)) {
t <- d %>% subset(group==i) %>% use_series(cluster) %>% table()
print(t)
num.correct <- num.correct + max(t)
print(paste("i:",i,"correct:",max(t),"/",sum(t),sep=" "))
}
frac.correct <- num.correct / dim(d)[[1]]
return(frac.correct)
}
analyse.json <- function(json.filename) {
d <- fromJSON(txt=json.filename)
# d is a data.frame with 3 columns: id / x / y
d$group <- genome.groups.from.id(d)
num.groups <- length(unique(d$group))
## the clustering seems variable, perhaps do 10 times and pick top one?
success.rate <- 0
for (i in 1:10) {
clustering <- kmeans(d[,c(2,3)], centers=num.groups, iter.max=1000, nstart=5)
d$cluster <- as.factor(clustering$cluster)
x <- get.success.rate(d, t, num.groups)
if (x>success.rate) {
success.rate <- x
}
}
print(success.rate)
gg <- ggplot(data=d, aes(x=x,y=y,colour=group,shape=cluster)) + geom_point()
return(list("success.rate" = foo, "gg" = gg))
}
folder.name <- "json/alpha"
list.of.json.files <- list.files(path = folder.name, pattern = ".*\\.json")
master <- data.frame(n=integer(),
k=integer(),
s=integer(),
tau=integer(),
m=integer(),
mu_gain=integer(),
mu_loss=integer(),
r=integer(),
file.path=character(),
f=numeric(),
gg=list(),
stringsAsFactors=FALSE)
json.file <- list.of.json.files[[1]]
json.path <- paste(folder.name,json.file,sep="/")
params <- as.integer(str_extract_all(json.file,"(\\d+)")[[1]])
print(params)
assert_that(length(params) == 8)
results <- analyse.json(json.path)
analyse.json <- function(json.filename) {
d <- fromJSON(txt=json.filename)
# d is a data.frame with 3 columns: id / x / y
d$group <- genome.groups.from.id(d)
num.groups <- length(unique(d$group))
## the clustering seems variable, perhaps do 10 times and pick top one?
success.rate <- 0
for (i in 1:10) {
clustering <- kmeans(d[,c(2,3)], centers=num.groups, iter.max=1000, nstart=5)
d$cluster <- as.factor(clustering$cluster)
x <- get.success.rate(d, t, num.groups)
if (x>success.rate) {
success.rate <- x
}
}
print(success.rate)
gg <- ggplot(data=d, aes(x=x,y=y,colour=group,shape=cluster)) + geom_point()
return(list("success.rate" = success.rate, "gg" = gg))
}
results <- analyse.json(json.path)
results
?use_series
rm(list=ls())
library(jsonlite)
library(magrittr)
library(ggplot2)
library(stringr)
library(assertthat)
setwd("~/Documents/sanger/paninisim")
#### how to import #####
# target directory contains a bunch of json files from PANINI
# the file names are read in, and then the paths are stored in a data.frame
# with fields:
# for each file (simulation):
#     the json is parsed and k is calculated
#     k-means clustering is done
#     for n <= k, what is max number of members of n in a single cluster
#     calculate percentage mis-clustered and store in data.frame
# visualise according to user definitions
genome.groups.from.id <- function(df,id="id") {
# returns a vector the same length as the incoming data.frame
return(apply(df[id],1,str_match,pattern="l(\\d+)g")[2,])
}
get.success.rate <- function(d, t, num.groups) {
### algorythm to determine success rate (loop over groups)
### t: data.frame with columns group & cluster
### returns float
num.correct <- 0
for (i in 0:(num.groups-1)) {
t <- d %>% subset(group==i) %>% use_series(cluster) %>% table()
print(t)
num.correct <- num.correct + max(t)
print(paste("i:",i,"correct:",max(t),"/",sum(t),sep=" "))
}
frac.correct <- num.correct / dim(d)[[1]]
return(frac.correct)
}
analyse.json <- function(json.filename) {
d <- fromJSON(txt=json.filename)
# d is a data.frame with 3 columns: id / x / y
d$group <- genome.groups.from.id(d)
num.groups <- length(unique(d$group))
## the clustering seems variable, perhaps do 10 times and pick top one?
success.rate <- 0
final.clustering <- NULL
for (i in 1:10) {
clustering <- kmeans(d[,c(2,3)], centers=num.groups, iter.max=1000, nstart=5)
d$cluster <- as.factor(clustering$cluster)
x <- get.success.rate(d, t, num.groups)
if (x>success.rate) {
success.rate <- x
final.clustering <- d$cluster
}
}
print(success.rate)
gg <- ggplot(data=d, aes(x=x,y=y,colour=group,shape=cluster)) + geom_point()
return(list("success.rate" = success.rate, "gg" = gg))
}
folder.name <- "json/alpha"
list.of.json.files <- list.files(path = folder.name, pattern = ".*\\.json")
master <- data.frame(n=integer(),
k=integer(),
s=integer(),
tau=integer(),
m=integer(),
mu_gain=integer(),
mu_loss=integer(),
r=integer(),
file.path=character(),
f=numeric(),
gg=list(),
stringsAsFactors=FALSE)
json.file <- list.of.json.files[[1]]
json.path <- paste(folder.name,json.file,sep="/")
params <- as.integer(str_extract_all(json.file,"(\\d+)")[[1]])
print(params)
assert_that(length(params) == 8)
results <- analyse.json(json.path)
results
do.kmeans.clustering <- function() {
clustering <- kmeans(d[,c(2,3)], centers=num.groups, iter.max=1000, nstart=5)
return(as.factor(clustering$cluster))
}
analyse.json <- function(json.filename) {
d <- fromJSON(txt=json.filename)
# d is a data.frame with 3 columns: id / x / y
d$group <- genome.groups.from.id(d)
num.groups <- length(unique(d$group))
# d$cluster <- do.kmeans.clustering(d, num.groups)
success.rate <- 0
final.clustering <- NULL
for (i in 1:10) {
clustering <- kmeans(d[,c(2,3)], centers=num.groups, iter.max=1000, nstart=5)
d$cluster <- as.factor(clustering$cluster)
x <- get.success.rate(d, t, num.groups)
if (x>success.rate) {
success.rate <- x
final.clustering <- d$cluster
}
}
d$cluster <- final.clustering
print(success.rate)
gg <- ggplot(data=d, aes(x=x,y=y,colour=group,shape=cluster)) + geom_point()
return(list("success.rate" = success.rate, "gg" = gg))
}
json.file <- list.of.json.files[[1]]
json.path <- paste(folder.name,json.file,sep="/")
params <- as.integer(str_extract_all(json.file,"(\\d+)")[[1]])
print(params)
assert_that(length(params) == 8)
results <- analyse.json(json.path)
results$gg
analyse.json <- function(json.filename) {
d <- fromJSON(txt=json.filename)
# d is a data.frame with 3 columns: id / x / y
d$group <- genome.groups.from.id(d)
num.groups <- length(unique(d$group))
d$cluster <- do.kmeans.clustering(d, num.groups)
print(success.rate)
gg <- ggplot(data=d, aes(x=x,y=y,colour=group,shape=cluster)) + geom_point()
return(list("success.rate" = success.rate, "gg" = gg))
}
results <- analyse.json(json.path)
do.kmeans.clustering <- function(d, num.groups) {
# the clustering seems variable, perhaps do 10 times and pick top one?
clustering <- kmeans(d[,c(2,3)], centers=num.groups, iter.max=1000, nstart=5)
return(as.factor(clustering$cluster))
}
analyse.json <- function(json.filename) {
d <- fromJSON(txt=json.filename)
# d is a data.frame with 3 columns: id / x / y
d$group <- genome.groups.from.id(d)
num.groups <- length(unique(d$group))
d$cluster <- do.kmeans.clustering(d, num.groups)
print(success.rate)
gg <- ggplot(data=d, aes(x=x,y=y,colour=group,shape=cluster)) + geom_point()
return(list("success.rate" = success.rate, "gg" = gg))
}
results <- analyse.json(json.path)
analyse.json <- function(json.filename) {
d <- fromJSON(txt=json.filename)
# d is a data.frame with 3 columns: id / x / y
d$group <- genome.groups.from.id(d)
num.groups <- length(unique(d$group))
d$cluster <- do.kmeans.clustering(d, num.groups)
success.rate <- get.success.rate(d, t, num.groups)
print(success.rate)
gg <- ggplot(data=d, aes(x=x,y=y,colour=group,shape=cluster)) + geom_point()
return(list("success.rate" = success.rate, "gg" = gg))
}
results <- analyse.json(json.path)
